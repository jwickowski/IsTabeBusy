// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static IsTableBusy.App.Web.Controllers.AdminPlacesController AdminPlaces = new IsTableBusy.App.Web.Controllers.T4MVC_AdminPlacesController();
    public static IsTableBusy.App.Web.Controllers.HomeController Home = new IsTableBusy.App.Web.Controllers.T4MVC_HomeController();
    public static IsTableBusy.App.Web.Controllers.PlacesController Places = new IsTableBusy.App.Web.Controllers.T4MVC_PlacesController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class app {
            private const string URLPATH = "~/Scripts/app";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ApiWrapper_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ApiWrapper.min.js") ? Url("ApiWrapper.min.js") : Url("ApiWrapper.js");
            public static readonly string config_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/config.min.js") ? Url("config.min.js") : Url("config.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class homePage {
                private const string URLPATH = "~/Scripts/app/homePage";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string HomePage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/HomePage.min.js") ? Url("HomePage.min.js") : Url("HomePage.js");
                public static readonly string Place_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Place.min.js") ? Url("Place.min.js") : Url("Place.js");
                public static readonly string PlacesViewModel_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PlacesViewModel.min.js") ? Url("PlacesViewModel.min.js") : Url("PlacesViewModel.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class places {
                private const string URLPATH = "~/Scripts/app/places";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string Device_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Device.min.js") ? Url("Device.min.js") : Url("Device.js");
                public static readonly string PlacesData_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PlacesData.min.js") ? Url("PlacesData.min.js") : Url("PlacesData.js");
                public static readonly string PlacesPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PlacesPage.min.js") ? Url("PlacesPage.min.js") : Url("PlacesPage.js");
                public static readonly string SelectDeviceViewModel_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/SelectDeviceViewModel.min.js") ? Url("SelectDeviceViewModel.min.js") : Url("SelectDeviceViewModel.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class placeTables {
                private const string URLPATH = "~/Scripts/app/placeTables";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string PlacesHub_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PlacesHub.min.js") ? Url("PlacesHub.min.js") : Url("PlacesHub.js");
                public static readonly string PlaceTablesPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PlaceTablesPage.min.js") ? Url("PlaceTablesPage.min.js") : Url("PlaceTablesPage.js");
                public static readonly string Table_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Table.min.js") ? Url("Table.min.js") : Url("Table.js");
                public static readonly string TablesViewModel_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TablesViewModel.min.js") ? Url("TablesViewModel.min.js") : Url("TablesViewModel.js");
            }
        
        }
    
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string jquery_2_1_4_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.4.intellisense.min.js") ? Url("jquery-2.1.4.intellisense.min.js") : Url("jquery-2.1.4.intellisense.js");
        public static readonly string jquery_2_1_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.4.min.js") ? Url("jquery-2.1.4.min.js") : Url("jquery-2.1.4.js");
        public static readonly string jquery_2_1_4_min_js = Url("jquery-2.1.4.min.js");
        public static readonly string jquery_2_1_4_min_map = Url("jquery-2.1.4.min.map");
        public static readonly string jquery_signalR_2_2_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.signalR-2.2.0.min.js") ? Url("jquery.signalR-2.2.0.min.js") : Url("jquery.signalR-2.2.0.js");
        public static readonly string jquery_signalR_2_2_0_min_js = Url("jquery.signalR-2.2.0.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string knockout_3_4_0_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout-3.4.0.debug.min.js") ? Url("knockout-3.4.0.debug.min.js") : Url("knockout-3.4.0.debug.js");
        public static readonly string knockout_3_4_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout-3.4.0.min.js") ? Url("knockout-3.4.0.min.js") : Url("knockout-3.4.0.js");
        public static readonly string lodash_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lodash.min.js") ? Url("lodash.min.js") : Url("lodash.js");
        public static readonly string lodash_min_js = Url("lodash.min.js");
        public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
        public static readonly string r_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/r.min.js") ? Url("r.min.js") : Url("r.js");
        public static readonly string require_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/require.min.js") ? Url("require.min.js") : Url("require.js");
        public static readonly string respond_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.min.js") ? Url("respond.min.js") : Url("respond.js");
        public static readonly string respond_min_js = Url("respond.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class typings {
            private const string URLPATH = "~/Scripts/typings";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap {
                private const string URLPATH = "~/Scripts/typings/bootstrap";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.d.min.js") ? Url("bootstrap.d.min.js") : Url("bootstrap.d.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery {
                private const string URLPATH = "~/Scripts/typings/jquery";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.d.min.js") ? Url("jquery.d.min.js") : Url("jquery.d.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class js_signals {
                private const string URLPATH = "~/Scripts/typings/js-signals";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string js_signals_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/js-signals.d.min.js") ? Url("js-signals.d.min.js") : Url("js-signals.d.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class knockout {
                private const string URLPATH = "~/Scripts/typings/knockout";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string knockout_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout.d.min.js") ? Url("knockout.d.min.js") : Url("knockout.d.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class lodash {
                private const string URLPATH = "~/Scripts/typings/lodash";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string lodash_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lodash.d.min.js") ? Url("lodash.d.min.js") : Url("lodash.d.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class signalr {
                private const string URLPATH = "~/Scripts/typings/signalr";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string signalr_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/signalr.d.min.js") ? Url("signalr.d.min.js") : Url("signalr.d.js");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class vendor {
            private const string URLPATH = "~/Scripts/vendor";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jsgrid {
                private const string URLPATH = "~/Scripts/vendor/jsgrid";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jsGrid_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jsGrid.d.min.js") ? Url("jsGrid.d.min.js") : Url("jsGrid.d.js");
                public static readonly string jsgrid_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jsgrid.min.js") ? Url("jsgrid.min.js") : Url("jsgrid.js");
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-theme.min.css") ? Url("bootstrap-theme.min.css") : Url("bootstrap-theme.css");
        public static readonly string bootstrap_theme_css_map = Url("bootstrap-theme.css.map");
        public static readonly string bootstrap_theme_min_css = Url("bootstrap-theme.min.css");
        public static readonly string bootstrap_theme_min_css_map = Url("bootstrap-theme.min.css.map");
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
        public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        public static readonly string bootstrap_min_css_map = Url("bootstrap.min.css.map");
        public static readonly string Site_less = Url("Site.less");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class vendor {
            private const string URLPATH = "~/Content/vendor";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jsgrid_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jsgrid-theme.min.css") ? Url("jsgrid-theme.min.css") : Url("jsgrid-theme.css");
            public static readonly string jsgrid_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jsgrid.min.css") ? Url("jsgrid.min.css") : Url("jsgrid.css");
        }
    
    }

    
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        public static partial class Scripts 
        {
            public static partial class app 
            {
                public static partial class homePage 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class places 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class placeTables 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                }
            }
            public static partial class typings 
            {
                public static partial class bootstrap 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class jquery 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class js_signals 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class knockout 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class lodash 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class signalr 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                }
            }
            public static partial class vendor 
            {
                public static partial class jsgrid 
                {
                    public static class Assets
                    {
                        public const string jsgrid_js = "~/Scripts/vendor/jsgrid/jsgrid.js"; 
                    }
                }
                public static class Assets
                {
                }
            }
            public static class Assets
            {
                public const string _references_js = "~/Scripts/_references.js"; 
                public const string bootstrap_js = "~/Scripts/bootstrap.js"; 
                public const string bootstrap_min_js = "~/Scripts/bootstrap.min.js"; 
                public const string jquery_2_1_4_intellisense_js = "~/Scripts/jquery-2.1.4.intellisense.js"; 
                public const string jquery_2_1_4_js = "~/Scripts/jquery-2.1.4.js"; 
                public const string jquery_2_1_4_min_js = "~/Scripts/jquery-2.1.4.min.js"; 
                public const string jquery_signalR_2_2_0_js = "~/Scripts/jquery.signalR-2.2.0.js"; 
                public const string jquery_signalR_2_2_0_min_js = "~/Scripts/jquery.signalR-2.2.0.min.js"; 
                public const string jquery_validate_js = "~/Scripts/jquery.validate.js"; 
                public const string jquery_validate_min_js = "~/Scripts/jquery.validate.min.js"; 
                public const string jquery_validate_unobtrusive_js = "~/Scripts/jquery.validate.unobtrusive.js"; 
                public const string jquery_validate_unobtrusive_min_js = "~/Scripts/jquery.validate.unobtrusive.min.js"; 
                public const string knockout_3_4_0_debug_js = "~/Scripts/knockout-3.4.0.debug.js"; 
                public const string knockout_3_4_0_js = "~/Scripts/knockout-3.4.0.js"; 
                public const string lodash_js = "~/Scripts/lodash.js"; 
                public const string lodash_min_js = "~/Scripts/lodash.min.js"; 
                public const string modernizr_2_6_2_js = "~/Scripts/modernizr-2.6.2.js"; 
                public const string r_js = "~/Scripts/r.js"; 
                public const string require_js = "~/Scripts/require.js"; 
                public const string respond_js = "~/Scripts/respond.js"; 
                public const string respond_min_js = "~/Scripts/respond.min.js"; 
            }
        }
        public static partial class Content 
        {
            public static partial class vendor 
            {
                public static class Assets
                {
                    public const string jsgrid_theme_css = "~/Content/vendor/jsgrid-theme.css";
                    public const string jsgrid_css = "~/Content/vendor/jsgrid.css";
                }
            }
            public static class Assets
            {
                public const string bootstrap_theme_css = "~/Content/bootstrap-theme.css";
                public const string bootstrap_theme_min_css = "~/Content/bootstrap-theme.min.css";
                public const string bootstrap_css = "~/Content/bootstrap.css";
                public const string bootstrap_min_css = "~/Content/bootstrap.min.css";
            }
        }
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114


